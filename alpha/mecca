#!/bin/bash

echo "MECCA Music Platform"
echo "Ctrl+C to quit"
echo "1 - New song"
echo "2 - Load song"
echo -n "> "
read launch
echo ""
if [ "$launch" = "1" ]; then
	echo "Name your song:"
	echo -n "> "
	read song
	echo ""
	if [ -f "$song"-bass.mec ] || [ -f "$song"-lead.mec ] ; then
    		echo "Song exists. Overwrite?"
		read -n1 ans
		echo ""
		if [ "$ans" = "y" ] || [ "$ans" = "Y" ]; then
			rm "$song"*.mec
		else
			exit 1
		fi
	fi

elif [ "$launch" = "2" ]; then
	echo "Enter song name"
	echo -n "> "
	read song
	echo ""
else
	echo "Please enter the number 1 or 2."
	exit 1
fi

# Define Functions

menu () {
	echo "[space] Play song"
	echo "[1] Undo last note"
	echo "[2] Record lead"
	echo "[3] Add eighth-notes"
	echo "[4] Add eighth-note triplets"
	echo "[5] Add quarter-notes"
	echo "[6] Add quarter-note triplets"
	echo "[7] Add half-notes"
	echo ""
	echo -n "Enter option > "
	read -n1 menu
	echo ""
	case "$menu" in 
	1) 	i=$((i-1))
		head -n -1 "$song"-"$track".mec  > temp.txt ; mv temp.txt "$song"-"$track".mec ;;
	2) synth=square track=lead i=1 ;;
	3) len=eighth ;;
	4) len=etrip ;;
	5) len=quarter ;;
	6) len=qtrip ;;
	7) len=half ;;
	'') play_song ;;
	*) continue ;;
	esac
	return
}

# Define note lengths

if [ "$1" == "" ]; then
	tempo=120
else
	tempo=$1
fi

whole=$(bc <<< "scale = 10; (240 / $tempo)")
half=$(bc <<< "scale = 10; (120 / $tempo)")
quarter=$(bc <<< "scale = 10; (60 / $tempo)")
qtrip=$(bc <<< "scale = 10; (40 / $tempo)")
eighth=$(bc <<< "scale = 10; (30 / $tempo)")
etrip=$(bc <<< "scale = 10; (20 / $tempo)")
teenth=$(bc <<< "scale = 10; (15 / $tempo)")
ttrip=$(bc <<< "scale = 10; (10 / $tempo)")

et_less=$(bc <<< "scale = 10; ($half - $etrip)")
q_less=$(bc <<< "scale = 10; ($half - $qtrip)")
e_less=$(bc <<< "scale = 10; ($half - $eighth)")
t_less=$(bc <<< "scale = 10; ($half - $teenth)")

create_drum_track () {
	echo "Creating drum track..."
	# hi-hat
	sox -n drum-h-whole.wav synth 0.01 noise fade 0 "$whole" "$whole" trim 0.0 "$whole" &>/dev/null
	sox drum-h-whole.wav drum-h-half.wav trim 0.0 "$half"
	sox drum-h-whole.wav drum-h-quarter.wav trim 0 "$quarter"
	sox drum-h-whole.wav drum-h-eighth.wav trim 0 "$eighth"
	sox drum-h-whole.wav drum-h-teenth.wav trim 0 "$teenth"
	# snare
	sox -n drum-s-whole.wav synth 0.1 noise fade 0 "$whole" "$whole" trim 0 "$whole" &>/dev/null
	sox drum-s-whole.wav drum-s-half.wav trim 0 "$half" &>/dev/null
	sox drum-s-whole.wav drum-s-quarter.wav trim 0 "$quarter" &>/dev/null
	sox drum-s-whole.wav drum-s-eighth.wav trim 0 "$eighth" &>/dev/null
	sox drum-s-whole.wav drum-s-teenth.wav trim 0 "$teenth" &>/dev/null
	# create pattern and loop it for length of song
	songlen="$(soxi -D "$song"-bass.wav)"
	sox drum-h-eighth.wav drum-h-teenth.wav drum-h-teenth.wav drum-s-eighth.wav drum-h-teenth.wav drum-h-teenth.wav "$song"-drums.wav
	sox "$song"-drums.wav "$song"-drums.wav "$song"-drums.wav "$song"-drums.wav "$song"-drums4.wav
	sox "$song"-drums4.wav "$song"-drums4.wav "$song"-drums4.wav "$song"-drums4.wav "$song"-drums16.wav
	sox "$song"-drums16.wav "$song"-drums16.wav "$song"-drums16.wav "$song"-drums16.wav "$song"-drums64.wav
	sox "$song"-drums64.wav "$song"-drums64.wav "$song"-drums128.wav trim 0 "$songlen"
}

create_notes () {
	if [ ! -f note-"$pitch"-"$wave"-half.wav ]; then
		echo "Generating sample "$pitch"-"$wave"..."
		case "$pitch" in
			c2) freq=65.41 ;; cs2) freq=69.3 ;; d2) freq=73.42 ;;
			ds2) freq=77.78 ;; e2) freq=82.41 ;; f2) freq=87.31 ;;
			fs2) freq=92.5 ;; g2) freq=98 ;; gs2) freq=103.83 ;;
			a2) freq=110 ;; as2) freq=116.54 ;; b2) freq=123.47 ;;
			c3) freq=130.81 ;; cs3) freq=138.59 ;; d3) freq=146.83 ;;
			ds3) freq=155.56 ;; e3) freq=164.81 ;; f3) freq=174.61 ;;
			fs3) freq=185 ;; g3) freq=196 ;; gs3) freq=207.65 ;;
			a3) freq=220 ;; as3) freq=233.08 ;; b3) freq=246.94 ;;
			c4) freq=261.63 ;; cs4) freq=277.18 ;; d4) freq=293.66 ;;
			ds4) freq=311.13 ;; e4) freq=329.63 ;; f4) freq=349.23 ;; 
			fs4) freq=369.99 ;; g4) freq=392 ;; gs4) freq=415.30 ;;
			a4) freq=440 ;; as4) freq=466.16 ;; b4) freq=493.88 ;;
			c5) freq=523.25 ;; r) freq=0 ;;
		esac

		sox -n note-"$pitch"-"$wave"-whole.wav synth "$whole" "$wave" "$freq" trim 0 "$whole" &>/dev/null
		sox note-"$pitch"-"$wave"-whole.wav note-"$pitch"-"$wave"-half.wav trim "$half" "$whole" &>/dev/null
		sox note-"$pitch"-"$wave"-half.wav note-"$pitch"-"$wave"-quarter.wav trim "$quarter" "$half" &>/dev/null
		sox note-"$pitch"-"$wave"-half.wav note-"$pitch"-"$wave"-qtrip.wav trim "$q_less" "$half" &>/dev/null
		sox note-"$pitch"-"$wave"-half.wav note-"$pitch"-"$wave"-etrip.wav trim "$et_less" "$half" &>/dev/null
		sox note-"$pitch"-"$wave"-half.wav note-"$pitch"-"$wave"-eighth.wav trim "$e_less" "$half" &>/dev/null
		sox note-"$pitch"-"$wave"-half.wav note-"$pitch"-"$wave"-teenth.wav trim "$t_less" "$half" &>/dev/null
	fi
}

play_note () {
	if [ ! -f note-"$note"-"$synth"-half.wav ]; then
		echo "Generating sample "$note"-"$synth"..."
		case "$note" in
			c2) freq=65.41 ;; cs2) freq=69.3 ;; d2) freq=73.42 ;;
			ds2) freq=77.78 ;; e2) freq=82.41 ;; f2) freq=87.31 ;;
			fs2) freq=92.5 ;; g2) freq=98 ;; gs2) freq=103.83 ;;
			a2) freq=110 ;; as2) freq=116.54 ;; b2) freq=123.47 ;;
			c3) freq=130.81 ;; cs3) freq=138.59 ;; d3) freq=146.83 ;;
			ds3) freq=155.56 ;; e3) freq=164.81 ;; f3) freq=174.61 ;;
			fs3) freq=185 ;; g3) freq=196 ;; gs3) freq=207.65 ;;
			a3) freq=220 ;; as3) freq=233.08 ;; b3) freq=246.94 ;;
			c4) freq=261.63 ;; cs4) freq=277.18 ;; d4) freq=293.66 ;;
			ds4) freq=311.13 ;; e4) freq=329.63 ;; f4) freq=349.23 ;; 
			fs4) freq=369.99 ;; g4) freq=392 ;; gs4) freq=415.30 ;;
			a4) freq=440 ;; as4) freq=466.16 ;; b4) freq=493.88 ;;
			c5) freq=523.25 ;; r) freq=0 ;;
		esac

		sox -n note-"$note"-"$synth"-whole.wav synth "$whole" "$synth" "$freq" trim 0 "$whole" &>/dev/null
		sox note-"$note"-"$synth"-whole.wav note-"$note"-"$synth"-half.wav trim "$half" "$whole" &>/dev/null
		sox note-"$note"-"$synth"-half.wav note-"$note"-"$synth"-quarter.wav trim "$quarter" "$half" &>/dev/null
		sox note-"$note"-"$synth"-half.wav note-"$note"-"$synth"-qtrip.wav trim "$q_less" "$half" &>/dev/null
		sox note-"$note"-"$synth"-half.wav note-"$note"-"$synth"-etrip.wav trim "$et_less" "$half" &>/dev/null
		sox note-"$note"-"$synth"-half.wav note-"$note"-"$synth"-eighth.wav trim "$e_less" "$half" &>/dev/null
		sox note-"$note"-"$synth"-half.wav note-"$note"-"$synth"-teenth.wav trim "$t_less" "$half" &>/dev/null
	fi
}

play_song () {
	# Assemble bass track
	echo "Building bass track..."
	sox -n -c 1 temp1.wav trim 0.0 0.0
	j=1
	while read -r pitch wave value; do
		create_notes
		sox temp"$j".wav note-"$pitch"-"$wave"-"$value".wav temp"$((j+1))".wav
		j=$((j+1))
	done < "$song"-bass.mec
	mv temp"$j".wav "$song"-bass.wav
	# Clean up samples
	rm note-*.wav
	rm temp*.wav
	if [ -f "$song"-lead.mec ]; then
		# Assemble lead track
		echo "Building lead track..."
		sox -n -c 1 temp1.wav trim 0.0 0.0
		j=1
		while read -r pitch wave value; do
			create_notes
			sox temp"$j".wav note-"$pitch"-"$wave"-"$value".wav temp"$((j+1))".wav
			j=$((j+1))
		done < "$song"-lead.mec
		sox temp"$j".wav "$song"-lead.wav pitch +1200 gain -15 &>/dev/null
		# Clean up samples
		rm note-*.wav
		rm temp*.wav
		create_drum_track
		sox -m "$song"-drums128.wav "$song"-bass.wav "$song"-lead.wav "$song"-mix.wav &>/dev/null
	else
		create_drum_track
		sox -m "$song"-drums128.wav "$song"-bass.wav "$song"-mix.wav &>/dev/null
	fi
	rm drum-*.wav
	echo "Playing... (Ctrl+C to stop)"
	play "$song"-mix.wav &>/dev/null
}

show_prompt () {
	echo "  -------------------------"
	echo "  | 2 | 3 |   | 5 | 6 | 7 |"
	echo "---------------------------------"
	echo "| q | w | e | r | t | y | u | i |"
	echo "---------------------------------"
	echo "  | s | d |    | g | h | j |"
	echo "---------------------------------"
	echo "| z | x | c | v | b | n | m | , |"
	echo "---------------------------------"
	echo ""
	echo "Synth ready. Press <spacebar> for options"
	echo -n "> "
}

# Initialize synth
i=1
len=quarter
synth=tri
track=bass

# Start main song loop
while true; do
	show_prompt
	# Grab single keypress from user
	read -n1 key
	echo ""
	# Define input keys
	case $key in
		z) note=c2 ;; s) note=cs2 ;; x) note=d2 ;; d) note=ds2 ;; c) note=e2 ;;
		v) note=f2 ;; g) note=fs2 ;; b) note=g2 ;; h) note=gs2 ;; n) note=a2 ;;
		j) note=as2 ;; m) note=b2 ;; ,) note=c3 ;; \;) note=r ;;
		q) note=c3 ;; 2) note=cs3 ;; w) note=d3 ;; 3) note=ds3 ;; e) note=e3 ;;
		r) note=f3 ;; 5) note=fs3 ;; t) note=g3 ;; 6) note=gs3 ;; y) note=a3 ;;
		7) note=as3 ;; u) note=b3 ;; i) note=c4 ;; '') menu ;; *) continue ;;
	esac
	if [ "$key" = "z" ] || [ "$key" = "s" ] || [ "$key" = "x" ] || [ "$key" = "d" ] || [ "$key" = "c" ] || [ "$key" = "v" ] || [ "$key" = "g" ] || [ "$key" = "b" ] || [ "$key" = "h" ] || [ "$key" = "n" ] || [ "$key" = "j" ] || [ "$key" = "m" ] || [ "$key" = "," ] || [ "$key" = ";" ] || [ "$key" = "q" ] || [ "$key" = "2" ] || [ "$key" = "w" ] || [ "$key" = "3" ] || [ "$key" = "e" ] || [ "$key" = "r" ] || [ "$key" = "5" ] || [ "$key" = "t" ] || [ "$key" = "6" ] || [ "$key" = "y" ] || [ "$key" = "7" ] || [ "$key" = "u" ] || [ "$key" = "i" ] ; then
		# Play note and append to song
		play_note
		play note-"$note"-"$synth"-"$len".wav &>/dev/null &
		if [ $track = bass ]; then
			echo "$note" "$synth" "$len" >> "$song"-bass.mec
		elif [ $track = lead ]; then
			echo "$note" "$synth" "$len" >> "$song"-lead.mec
		fi
		# increment note counter
		i=$((i+1))
	fi
done
