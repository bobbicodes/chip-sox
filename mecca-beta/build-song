#!/bin/bash

# Usage:
# build-song <song> <tempo>

# Clean up any old samples
rm note*.wav &>/dev/null

# Check if there are 2 bass tracks
if [ -f "$1"-bass-A ] ; then
	# Build them both
	echo "Building bass track A..."
	./build-track "$1"-bass-A triangle "$2"
	echo "Building bass track B"
	./build-track "$1"-bass-B triangle "$2"
	# Put them in sequence
	# Look for bass control file
	if [ -f "$1"-bass.mec ] ; then
		# Create blank .wav file
		sox -n -c 1 temp1.wav trim 0.0 0.0
		j=1
		while read -r track; do
			sox temp"$j".wav "$1"-bass-"$track".wav temp"$((j+1))".wav
			rm temp"$j".wav
			j=$((j+1))
		done < "$1"-bass.mec
		mv temp"$j".wav "$1"-bass.wav
	else
		# By default they are concatenated (A B)
		sox "$1"-bass-A.wav "$1"-bass-B.wav "$1"-bass.wav
	fi
else
	# Build the one track
	echo "Building bass track..."
	./build-track "$1"-bass triangle "$2"
fi
# Check if there are 2 lead (AB) tracks
if [ -f "$1"-lead-A ] || [ -f "$1"-lead1-A ] ; then
	# Build lead A and B
	# Check if there are 2 lead (harmony) tracks
	if [ -f "$1"-lead1-A ] ; then
		# Build leads 1-A, 1-B, 2-A and 2-B
		echo "Building lead1-A..."
		./build-track "$1"-lead1-A square "$2"
		echo "Building lead1-B..."
		./build-track "$1"-lead1-B square "$2"
		echo "Building lead2-A"
		./build-track "$1"-lead2-A square "$2"
		echo "Building lead2-B"
		./build-track "$1"-lead2-B square "$2"
		# And mix them together
		echo "Mixing..."
		sox -m "$1"-lead1-A.wav "$1"-lead2-A.wav "$1"-lead-A.wav &>/dev/null
		sox -m "$1"-lead1-B.wav "$1"-lead2-B.wav "$1"-lead-B.wav &>/dev/null
		# Put them in sequence
		# Look for lead control file
		if [ -f "$1"-lead.mec ] ; then
			# Create blank .wav file
			sox -n -c 1 temp1.wav trim 0.0 0.0
			j=1
			while read -r track; do
				sox temp"$j".wav "$1"-lead-"$track".wav temp"$((j+1))".wav
				rm temp"$j".wav
				j=$((j+1))
			done < "$1"-lead.mec
			mv temp"$j".wav "$1"-lead.wav
		else
			# By default they are concatenated (A B)
			sox "$1"-lead-A.wav "$1"-lead-B.wav "$1"-lead.wav
		fi
	# Delete individual tracks
	rm "$1"-lead1-A.wav
	rm "$1"-lead2-A.wav
	rm "$1"-lead1-B.wav
	rm "$1"-lead2-B.wav
	else
		# Otherwise just do leads A and B
		echo "Building lead track A..."
		./build-track "$1"-lead-A square "$2"
		echo "Building lead track B..."
		./build-track "$1"-lead-B square "$2"
		# Put them in sequence
		# Look for lead control file
		if [ -f "$1"-lead.mec ] ; then
			# Create blank .wav file
			sox -n -c 1 temp1.wav trim 0.0 0.0
			j=1
			while read -r track; do
				sox temp"$j".wav "$1"-lead-"$track".wav temp"$((j+1))".wav
				rm temp"$j".wav
				j=$((j+1))
			done < "$1"-lead.mec
			mv temp"$j".wav "$1"-lead.wav
		else
			# By default they are concatenated (A B)
			sox "$1"-lead-A.wav "$1"-lead-B.wav "$1"-lead.wav
		fi
	# Delete individual tracks
	rm "$1"-lead-A.wav
	rm "$1"-lead-B.wav
fi
else
	# Check if there are 2 lead (harmony) tracks
	if [ -f "$1"-lead1 ] ; then
		# Build lead1 and lead2
		echo "Building lead1..."
		./build-track "$1"-lead1 square "$2"
		echo "Building lead2"
		./build-track "$1"-lead2 square "$2"
		# And mix them together
		echo "Mixing..."
		sox -m "$1"-lead1.wav "$1"-lead2.wav "$1"-lead.wav &>/dev/null
		# Delete individual tracks
		rm "$1"-lead1.wav
		rm "$1"-lead2.wav
	else
		# Otherwise just do the 1 lead
		echo "Building lead track..."
		./build-track "$1"-lead square "$2"
	fi
fi
# Build drum track
# Check if there are 2 drum (AB) tracks
if [ -f "$1"-drums-A ] || [ -f "$1"-drums1-A ] ; then
	# Build drums A and B
	# Check if there are 2 drum (simultaneous) tracks
	if [ -f "$1"-drums1-A ] ; then
		# Build drums 1-A, 1-B, 2-A and 2-B
		echo "Building drums1-A..."
		./build-drums "$1"-drums1-A "$2"
		echo "Building drums1-B..."
		./build-drums "$1"-drums1-B "$2"
		echo "Building drums2-A"
		./build-drums "$1"-drums2-A "$2"
		echo "Building drums2-B"
		./build-drums "$1"-drums2-B "$2"
		# And mix them together
		echo "Mixing..."
		sox -m "$1"-drums1-A.wav "$1"-drums2-A.wav "$1"-drums-A.wav &>/dev/null
		sox -m "$1"-drums1-B.wav "$1"-drums2-B.wav "$1"-drums-B.wav &>/dev/null
		# Put them in sequence
		# Look for drum control file
		if [ -f "$1"-drums.mec ] ; then
			# Create blank .wav file
			sox -n -c 1 temp1.wav trim 0.0 0.0
			j=1
			while read -r track; do
				sox temp"$j".wav "$1"-drums-"$track".wav temp"$((j+1))".wav
				rm temp"$j".wav
				j=$((j+1))
			done < "$1"-drums.mec
			mv temp"$j".wav "$1"-drums.wav
		else
			# By default they are concatenated (A B)
			sox "$1"-drums-A.wav "$1"-drums-B.wav "$1"-drums.wav
		fi
	# Delete individual tracks
	rm "$1"-drums1-A.wav
	rm "$1"-drums2-A.wav
	rm "$1"-drums1-B.wav
	rm "$1"-drums2-B.wav
	else
		# Otherwise just do drums A and B
		echo "Building drum track A..."
		./build-drums "$1"-drums-A "$2"
		echo "Building drum track B..."
		./build-drums "$1"-drums-B "$2"
		# Put them in sequence
		# Look for drum control file
		if [ -f "$1"-drums.mec ] ; then
			# Create blank .wav file
			sox -n -c 1 temp1.wav trim 0.0 0.0
			j=1
			while read -r track; do
				sox temp"$j".wav "$1"-drums-"$track".wav temp"$((j+1))".wav
				rm temp"$j".wav
				j=$((j+1))
			done < "$1"-drums.mec
			mv temp"$j".wav "$1"-drums.wav
		else
			# By default they are concatenated (A B)
			sox "$1"-drums-A.wav "$1"-drums-B.wav "$1"-drums.wav
		fi
	# Delete individual tracks
	rm "$1"-drums-A.wav
	rm "$1"-drums-B.wav
fi
else
	# Check if there are 2 drum (simultaneous) tracks
	if [ -f "$1"-drums1 ] ; then
		# Build drums1 and drums2
		echo "Building drums1..."
		./build-drums "$1"-drums1 "$2"
		echo "Building drums2"
		./build-drums "$1"-drums2 "$2"
		# And mix them together
		echo "Mixing..."
		sox -m "$1"-drums1.wav "$1"-drums2.wav "$1"-drums.wav &>/dev/null
		# Delete individual tracks
		rm "$1"-drums1.wav
		rm "$1"-drums2.wav
	else
		# Otherwise just do the 1 drum track
		echo "Building drum track..."
		./build-drums "$1"-drums "$2"
	fi
fi
# Mix final tracks together
echo "Mixing..."
sox -m "$1"-drums.wav "$1"-bass.wav "$1"-lead.wav "$1".wav &>/dev/null
# Delete track files
# rm "$1"-drums.wav
# rm "$1"-bass.wav
# rm "$1"-lead.wav
# Clean up samples
rm note*.wav
# Play it!
echo "Playing..."
play "$1".wav &>/dev/null
